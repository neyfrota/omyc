#!/usr/bin/perl
use Data::Dumper;
use lib '/omyc/lib';# ask perl to look modules in this folder 
use tools;
use cmdLine;
use config;
#
# globals
my %config = ();
my $fail = "";
my $minimum_seconds_between_ok_updates = 60*60;
#
# get parameters
my $option  = (@ARGV)[0];
$option = &trim(&clean_string("\L$option"));
my $file    = "/data/settings/noip.conf";
#
# check file
if (!$file) { &exit_with_error(1,"Missing config file");}
unless (-e $file) { &exit_with_error(3,"Config file not found");}
unless (-w $file) { &exit_with_error(4,"Cannot write config file");}
#
# read file
%config = &config::read($file);
$config{lastUpdateOk} = ($config{lastUpdateOk}) ? 1 : 0;
#
# if no config, friendly message
if ( (!$config{hostname}) && (!$config{username}) && (!$config{password}) ) {
    $config{lastUpdateOk} = 1;
    $config{lastUpdateMessage} = "No-ip disabled. Nothing to do.";
    $config{lastUpdateTS} = time;
    &config::write($file,%config);
	exit;
}
#
#  check for config fail
$fail = "";
if    (!$config{hostname}) { $fail = "Hostname not set" }	
elsif (!$config{username}) { $fail = "Username not set" }	
elsif (!$config{password}) { $fail = "Password not set" }
if ($fail) {
    $config{lastUpdateOk} = 0;
    $config{lastUpdateMessage} = "Config error. $fail";
    $config{lastUpdateTS} = time;
    &config::write($file,%config);
    &exit_with_error(5,"Config error: $fail");
}
#
# if force, lets do it without check 
if ($option eq "force") {
    &update_noip();
    if ($config{lastUpdateOk}) {exit_ok($config{lastUpdateMessage}); } else { &exit_with_error(99,$config{lastUpdateMessage}); }
    exit;
}
# 
# if last update is not ok, better stop 
if (!$config{lastUpdateOk}) {
    &exit_with_error(6,"Last update was fail. Better do nothing");
}
#
# check if ip changes
$config{detectIpPublic} =`curl -s http://ipecho.net/plain`;
$config{detectIpNoip} =`dig -t A +short $config{hostname}`;
$config{detectTS} = time; 
chomp($config{detectIpPublic});
chomp($config{detectIpNoip});
&config::write($file,%config);
if ($config{detectIpPublic} eq $config{detectIpNoip}) {
    &exit_with_error(7,"Ip still the same. No update need.");
}
#
# avoid flood update 
if ($config{lastUpdateTS}) {
    my $tmp = time-$config{lastUpdateTS};
    if ($tmp < $minimum_seconds_between_ok_updates) {
        &exit_with_error(8,"Last update was to short. Better do nothing");
    }
}
#
# all fine. lets update
&update_noip();
if ($config{lastUpdateOk}) {exit_ok($config{lastUpdateMessage}); } else { &exit_with_error(99,$config{lastUpdateMessage}); }
exit;
#



sub update_noip{
    #
    # good 179.176.43.236
    # good IP_ADDRESS	Success	DNS hostname update successful. Followed by a space and the IP address it was updated to.
    # nochg IP_ADDRESS	Success	IP address is current, no update performed. Followed by a space and the IP address that it is currently set to.
    # nohost	Error	Hostname supplied does not exist under specified account, client exit and require user to enter new login credentials before performing an additional request.
    # badauth	Error	Invalid username password combination
    # badagent	Error	Client disabled. Client should exit and not perform any more updates without user intervention.
    # !donator	Error	An update request was sent including a feature that is not available to that particular user such as offline options.
    # abuse	Error	Username is blocked due to abuse. Either for not following our update specifications or disabled due to violation of the No-IP terms of service. Our terms of service can be viewed here. Client should stop sending updates.
    # 911	Error	A fatal error on our side such as a database outage. Retry the update no sooner than 30 minutes.
    my $cmd ="curl -s -A \"OMYC Update Client/0.1 ney\@frota.net\" --user \"$config{username}:$config{password}\" \"http://dynupdate.no-ip.com/nic/update?hostname=$config{hostname}\"  2>\&1 ";
    my $ans = `$cmd`;
#print "oops \n".`id`.`la -ls -lah /dev/null`."\ncmd=$cmd\nANS=$ans\n\nfile=$file\noption=$option\n\nconfig=".Dumper(\%config); exit;


    #
    # GRRRR!!!
    chomp($ans);
    chomp($ans);
    my $find = "\r";
    my $replace = " ";
    $find = quotemeta $find; # escape regex metachars if present
    $ans =~ s/$find/$replace/g;
    $find = "\n";
    $replace = " ";
    $find = quotemeta $find; # escape regex metachars if present
    $ans =~ s/$find/$replace/g;
    #
    if ( (index($ans,"good ") eq 0) || (index($ans,"nochg ") eq 0)  ) {
        #
        # OK
        my $ip = &trim(substr($ans,index($ans," ")+1,16));
        $config{detectIpPublic} =$ip;
        $config{detectIpNoip} =$ip;
        $config{detectTS} = time; 
        $config{lastUpdateOk} = 1;
        $config{lastUpdateMessage} = "Successful update $config{hostname} to $config{detectIpPublic}";
        $config{lastUpdateNoipResponse} = $ans;
        $config{lastUpdateTS} = time;
        &config::write($file,%config);
        #
	} else {
        #
        # FAIL
        my $ip = substr($ans,index($ans," ")+1,16);
        $config{lastUpdateOk} = 0;
        $config{lastUpdateMessage} = "Fail update (".substr($ans,0,15).")";
        $config{lastUpdateNoipResponse} = $ans;
        $config{lastUpdateTS} = time;
        &config::write($file,%config);
        #
    }
}

